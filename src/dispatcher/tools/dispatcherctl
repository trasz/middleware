#!/usr/local/bin/python3
#+
# Copyright 2014 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################


import sys
import argh
import json
import time
import socket
import shutil
from freenas.dispatcher.client import Client
from freenas.dispatcher.jsonenc import dump
from freenas.dispatcher.rpc import RpcException
from texttable import Texttable


DEFAULT_SERVER = 'unix:'
DEFAULT_TIMEOUT = 10


@argh.arg('--server')
@argh.arg('--timeout')
@argh.arg('--stream')
@argh.arg('-j')
@argh.arg('args', nargs='*')
def call(method, args, server=DEFAULT_SERVER, timeout=DEFAULT_TIMEOUT, stream=False, j=False):
    c = create_client(server)
    c.default_timeout = timeout

    if j:
        args = json.loads(args[0])
    else:
        for idx, i in enumerate(args):
            args[idx] = json.loads(i)

    try:
        if stream:
            if server == DEFAULT_SERVER:
                c.call_sync('management.enable_features', ['streaming_responses'])

            for i in c.call_sync(method, *args):
                dump(i, sys.stdout, indent=4)
                print()

            return
        else:
            result = c.call_sync(method, *args)
    except RpcException as e:
        print('ERROR: {0}'.format(str(e)), file=sys.stderr)
        sys.exit(e.code)

    if result is not None:
        dump(result, sys.stdout, indent=4)


@argh.arg('--server')
@argh.arg('--timeout')
@argh.arg('-j')
@argh.arg('args', nargs='*')
def emit(event, args, server=DEFAULT_SERVER, timeout=DEFAULT_TIMEOUT, j=False):
    c = create_client(server)
    c.default_timeout = timeout

    if j:
        data = json.loads(args[0])
    else:
        data = {}
        for k, v in zip(args[::2], args[1::2]):
            v = strtoint(v)
            data[k] = v

    c.emit_event(event, data)


@argh.arg('--server')
def enum(server=DEFAULT_SERVER):
    c = create_client(server)
    for svc in c.call_sync('discovery.get_services', timeout=DEFAULT_TIMEOUT):
        print("Service: {0}".format(svc))
        print("Methods:")
        for m in c.call_sync('discovery.get_methods', svc, timeout=DEFAULT_TIMEOUT):
            print("\t{0}".format(m['name']))


@argh.arg('--server')
@argh.arg('events', nargs='*')
def listen(events, server=DEFAULT_SERVER):
    def callback(name, args):
        print("New event: {0}".format(name))

    c = create_client(server)
    c.event_callback = callback
    c.subscribe_events(*events)
    try:
        c.wait_forever()
    except KeyboardInterrupt:
        return


@argh.arg('--server')
def submit(task, args, server=DEFAULT_SERVER):
    pass


@argh.arg('--server')
@argh.arg('--limit')
def tasks(server=DEFAULT_SERVER, limit=None, H=False):
    c = create_client(server)
    result = c.call_sync('task.list_tasks', limit)

    table = Texttable(0)
    table.set_deco(Texttable.HEADER | Texttable.VLINES)

    table.add_row(['ID', 'Name', 'State', 'Progress', 'Created at'])

    for task in result:
        table.add_row([
            task['id'],
            task['name'],
            task['state'],
            '',
            time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(task['created_at']))
        ])

    print(table.draw())


@argh.arg('--server')
def poll(task_id, server=DEFAULT_SERVER):
    c = create_client(server)
    result = c.call_sync('task.status', DEFAULT_TIMEOUT, task_id)
    print("Task #{0}:".format(result['id']))
    print("Created at: {0}".format(time.localtime(result['created_at'])))
    print("Name: {0}".format(result['name']))
    print("Arguments: {0}".format(','.join(result['args'])))
    print("State: {0}".format(result['state']))

    if 'progress' in result:
        pass


@argh.arg('--server')
@argh.arg('--timeout')
def wait_server(server=DEFAULT_SERVER, timeout=DEFAULT_TIMEOUT):
    while timeout > 0:
        try:
            total = 0
            done = 0
            finished = False

            def callback(name, args):
                nonlocal done
                nonlocal total

                if name == 'server.plugin.loaded':
                    total += 1

                if name == 'server.plugin.initialized':
                    norm_progress = int(20 * float(done / total))
                    progress_bar = ''.join('#' if i <= norm_progress else ' ' for i in range(20))
                    cols, rows = shutil.get_terminal_size()
                    if not finished:
                        print('[{0}] Plugin loaded: {1}'.format(progress_bar, args['name']).ljust(cols), end='\r')
                    done += 1

            c = Client()
            c.event_callback = callback
            c.connect(server)
            c.login_service('dispatcherctl', timeout)
            total = len(c.call_sync('management.get_plugin_names'))
            c.subscribe_events('server.plugin.initialized', 'server.plugin.loaded')
            c.call_sync('management.wait_ready', timeout=timeout)
            finished = True
            cols, rows = shutil.get_terminal_size()
            print('[####################] Finished.'.ljust(cols))
            sys.exit(0)
        except socket.error:
            time.sleep(1)
            timeout -= 1
            continue

    sys.exit(1)


@argh.arg('--server')
@argh.arg('--timeout')
@argh.arg('level', nargs='?', default=None)
def loglevel(level, server=DEFAULT_SERVER, timeout=DEFAULT_TIMEOUT):
    c = create_client(server)
    if not level:
        print(c.call_sync('management.get_logging_level', timeout=timeout))
        return

    c.call_sync('management.set_logging_level', level, timeout=timeout)


def create_client(server):
    try:
        c = Client()
        c.connect(server)
        if server == DEFAULT_SERVER:
            c.login_service('dispatcherctl', DEFAULT_TIMEOUT)
    except socket.error as err:
        print("Cannot connect: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)

    return c


def strtoint(v):
    # If string is quoted, strip quotes and return
    if v[0] == '"' and v[-1] == '"':
        return v[1:-1]

    try:
        v = int(v)
        return v
    except ValueError:
        pass

    return v


def main():
    parser = argh.ArghParser()
    parser.add_commands([enum, call, emit, wait_server, listen, submit, poll, tasks, loglevel])
    parser.dispatch()


if __name__ == '__main__':
    main()
